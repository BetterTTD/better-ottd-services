@page "/Servers"

@using Microsoft.AspNetCore.SignalR.Client
@using OpenTTD.SignalrHub.Messages.Models
@using OpenTTD.SignalrHub.Messages.Servers

<h3>Servers</h3>

@if (AddDialogOpen)
{
    <ModalDialog Title="Add server" OnClose="@OnAddDialogClose">
        <EditForm Model="@AddServerModel">
            <InputText @bind-Value="AddServerModel.Ip" DisplayName="IP Address"/>
            <InputNumber @bind-Value="AddServerModel.Port" DisplayName="Port"/>
            <InputText @bind-Value="AddServerModel.Pass" type="password" DisplayName="Password"/>
            <InputText @bind-Value="AddServerModel.BotName" DisplayName="Bot Name"/>
            <InputText @bind-Value="AddServerModel.BotVer" DisplayName="Bot Version"/>
        </EditForm>
    </ModalDialog>
}

<button type="button" class="btn btn-success btn-sm" @onclick="@OpenAddDialog">Add</button>

<table class="table">
    <thead>
    <tr>
        <th scope="col">#</th>
        <th scope="col">Address</th>
        <th scope="col">Name</th>
        <th scope="col"></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var (id, server) in _servers.Select((server, id) => (id, server)))
    {
        <tr>
            <th scope="row">@id</th>
            <td>@server.Info.Ip:@server.Info.Port</td>
            <td>@server.Info.Name</td>
            <td><button class="btn btn-sm btn-info" @onclick="@(() => Connect(server.Id))">Connect</button></td>
        </tr>
    }
    </tbody>
</table>

@inject HttpClient _http;

@code {
    private HubConnection? _hubConnection;

    private List<Server> _servers = new();

    private bool AddDialogOpen { get; set; }
    private AddServerDialogModel AddServerModel { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:6003/server")
            .Build();

        _hubConnection.On<OnServers>(nameof(OnServers), @event =>
        {
            Console.WriteLine(@event);
            _servers = @event.Servers.ToList();
            StateHasChanged();
        });

        _hubConnection.On<OnServerInfoUpdated>(nameof(OnServerInfoUpdated), @event =>
        {
            Console.WriteLine(@event);
            var server = _servers.FirstOrDefault(s => s.Id == @event.ServerId, new Server
            {
                Id = @event.ServerId,
                Info = @event.Info,
                Clients = Array.Empty<Client>()
            }) with{Info = @event.Info};
            
            _servers = _servers
                .Where(s => s.Id != server.Id)
                .Append(server)
                .ToList();
            
            StateHasChanged();
        });
        
        await _hubConnection.StartAsync();
        await _hubConnection.SendAsync(nameof(AskServers));
    }

    private async Task Connect(Guid serverId)
    {
        var url = $"http://localhost:6001/servers/{serverId.ToString()}/connect";
        await _http.PutAsync(url, null);
    }
    
    private void OpenAddDialog()
    {
        AddDialogOpen = true;
        StateHasChanged();
    }
    
    private async Task OnAddDialogClose(bool accepted)
    {
        if (accepted && 
            !string.IsNullOrWhiteSpace(AddServerModel.Ip) && 
            !string.IsNullOrWhiteSpace(AddServerModel.Pass) &&
            AddServerModel.Port != 0)
        {
            const string url = "http://localhost:6001/servers";
            await _http.PostAsJsonAsync(url, AddServerModel);
        }
    
        AddDialogOpen = false;
        StateHasChanged();
        await Task.CompletedTask;
    }

    public record AddServerDialogModel
    {
        public string Ip { get; set; } = "178.66.182.55";
        public int Port { get; set; } = 3977;
        public string Pass { get; set; } = string.Empty;
        public string BotName { get; set; } = "TG Bot";
        public string BotVer { get; set; } = "1.0.0";
    }
}